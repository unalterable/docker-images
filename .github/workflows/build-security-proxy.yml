name: Build, Test, Push Security Proxy

on:
  push:
    branches:
      - main
    paths:
      - 'security-proxy/**'
  pull_request:
    branches:
      - main
    paths:
      - 'security-proxy/**'

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Build the Docker image
    - name: Build Docker image
      run: |
        cd security-proxy
        docker build -t security-proxy .

    # Run the container with environment variables
    - name: Run Docker container
      run: |
        cd security-proxy
        docker run -d -p 443:443 -p 5000:5000 --name security-proxy \
          -e ADMIN_API_KEY=test-key -e UPSTREAM_HOST=https://httpbin.org security-proxy

        sleep 3

        docker logs security-proxy

        echo "Running: curl --fail --verbose http://localhost:5000/"
        curl --fail --verbose "http://localhost:5000/" || echo "Curl command failed for URL: $1"

    # Test API endpoints using Bash
    - name: Test API Endpoints
      run: |
        # Happy path: Add a user
        curl --fail -X POST -H "x-api-key: test-key" -H "Content-Type: application/json" \
          -d '{"username": "testuser", "password": "testpassword"}' -m 10 \
          http://localhost:5000/add-user || (echo "Add user failed"; exit 1)

        # Happy path: List users
        curl --fail -X GET -H "x-api-key: test-key" -m 10 \
          http://localhost:5000/list_users || (echo "List users failed"; exit 1)

        # Fail path: Add a user without API key
        curl -X POST -H "Content-Type: application/json" \
          -d '{"username": "invalid", "password": "invalid"}' -m 10 \
          http://localhost:5000/add-user && (echo "Unauthorized user creation did not fail"; exit 1) || echo "Unauthorized add user passed"

        # Fail path: Invalid API key
        curl -X GET -H "x-api-key: invalid-key" -m 10 \
          http://localhost:5000/list_users && (echo "Invalid key did not fail"; exit 1) || echo "Invalid API key passed"

        # Happy path: View unauthorized logs
        curl --fail -X GET -H "x-api-key: test-key" -m 10 \
          http://localhost:5000/unauthorized-logs || (echo "Unauthorized logs retrieval failed"; exit 1)

        # Fail path: View unauthorized logs without API key
        curl -X GET -m 10 http://localhost:5000/unauthorized-logs && (echo "Unauthorized logs retrieval did not fail"; exit 1) || echo "Unauthorized logs retrieval passed"

        # # Happy path: View authorized logs
        # curl --fail -X GET -H "x-api-key: test-key" -m 10 \
        #   http://localhost:5000/authorized-logs || (echo "Authorized logs retrieval failed"; exit 1)

        # # Fail path: View authorized logs without API key
        # curl -X GET -m 10 http://localhost:5000/authorized-logs && (echo "Authorized logs retrieval did not fail"; exit 1) || echo "Authorized logs retrieval passed"

    # Test NGINX Proxying
    - name: Test NGINX Proxying
      run: |
        # Happy path: Proxy with valid credentials
        curl --fail -k -u testuser:testpassword https://localhost/get || (echo "Proxying with valid credentials failed"; exit 1)

        # Fail path: Proxy with invalid credentials
        curl -k -u invalid:invalid https://localhost/get && (echo "Proxying with invalid credentials did not fail"; exit 1) || echo "Unauthorized proxying passed"

    # Cleanup
    - name: Cleanup Docker
      run: |
        docker stop security-proxy

    - name: Push Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
        docker tag security-proxy $DOCKER_USERNAME/security-proxy:latest
        docker push $DOCKER_USERNAME/security-proxy:latest
