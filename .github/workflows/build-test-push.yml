name: Generic Build, Test, Push Pipeline

permissions:
  contents: write    # This allows pushing tags
  packages: write    # This allows pushing to GitHub Container Registry if needed

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version for specific folder (format: folder-name:version)'
        required: false
        type: string
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - '.gitignore'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Detect changed folders
        id: set-matrix
        run: |
          # If manually triggered with workflow_dispatch, check all folders
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            FOLDERS=$(find . -maxdepth 1 -type d -not -path "./.*" -not -path "." | sed 's|./||' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            # Get all the modified folders from the commit
            FOLDERS=$(find . -maxdepth 1 -type d -not -path "./.*" -not -path "." | sed 's|./||' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          echo "matrix=${FOLDERS}" >> $GITHUB_OUTPUT

  build-test-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        folder: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
        
    steps:
    # Only proceed if changed files are in the current folder or if this is a workflow_dispatch
    - name: Check if folder has changes
      id: check_changes
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Detect changes in folder
      id: detect_folder_changes
      run: |
        # Always process with workflow_dispatch
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.event_name }}" == "pull_request" ]; then
          BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          CHANGED=$(git diff --name-only $BASE_SHA ${{ github.event.pull_request.head.sha }} | grep -q "^${{ matrix.folder }}/" && echo "true" || echo "false")
          echo "changed=${CHANGED}" >> $GITHUB_OUTPUT
        else
          BEFORE_SHA=$(git rev-list -n 1 HEAD^)
          CHANGED=$(git diff --name-only $BEFORE_SHA HEAD | grep -q "^${{ matrix.folder }}/" && echo "true" || echo "false")
          echo "changed=${CHANGED}" >> $GITHUB_OUTPUT
        fi

    # Check for version override from input parameter
    - name: Check for version override
      id: check_version_override
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.version_override != ''
      run: |
        OVERRIDE_INPUT="${{ github.event.inputs.version_override }}"
        
        # Extract folder and version from input (folder-name:version)
        FOLDER_NAME=$(echo $OVERRIDE_INPUT | cut -d':' -f1)
        VERSION=$(echo $OVERRIDE_INPUT | cut -d':' -f2)
        
        # Check if this is the folder we want to override
        if [ "$FOLDER_NAME" == "${{ matrix.folder }}" ]; then
          echo "has_override=true" >> $GITHUB_OUTPUT
          echo "override_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version override for $FOLDER_NAME: $VERSION"
        else
          echo "has_override=false" >> $GITHUB_OUTPUT
          echo "No version override for ${{ matrix.folder }}"
        fi
        
    # Skip remaining steps if no changes in this folder
    - name: Skip if no changes
      if: steps.detect_folder_changes.outputs.changed != 'true'
      run: echo "No changes detected in ${{ matrix.folder }}, skipping remaining steps"

    # Set up Docker
    - name: Set up Docker
      if: steps.detect_folder_changes.outputs.changed == 'true'
      uses: docker/setup-buildx-action@v2

    # Build the Docker image
    - name: Build Docker image
      if: steps.detect_folder_changes.outputs.changed == 'true'
      run: |
        cd ${{ matrix.folder }}
        docker build -t ${{ matrix.folder }} .

    # Check for folder-specific test script
    - name: Check for test script
      if: steps.detect_folder_changes.outputs.changed == 'true'
      id: check_test_script
      run: |
        if [ -f "${{ matrix.folder }}/pipeline-tests.sh" ]; then
          echo "has_test_script=true" >> $GITHUB_OUTPUT
        else
          echo "has_test_script=false" >> $GITHUB_OUTPUT
          echo "Warning: No pipeline-tests.sh found in ${{ matrix.folder }}. Skipping tests."
        fi

    # Run folder-specific test script if it exists
    - name: Run test script
      if: steps.detect_folder_changes.outputs.changed == 'true' && steps.check_test_script.outputs.has_test_script == 'true'
      run: |
        chmod +x ${{ matrix.folder }}/pipeline-tests.sh
        cd ${{ matrix.folder }}
        ./pipeline-tests.sh

    # Get and increment version tag
    - name: Get latest version and create new tag
      if: github.event_name != 'pull_request' && steps.detect_folder_changes.outputs.changed == 'true'
      id: tag_version
      run: |
        # Check for version override from workflow_dispatch
        if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ steps.check_version_override.outputs.has_override }}" == "true" ]]; then
          # Use the provided override version
          NEW_VERSION="${{ steps.check_version_override.outputs.override_version }}"
          NEW_TAG="${{ matrix.folder }}-$NEW_VERSION"
          echo "Using manual version override: $NEW_VERSION"
        else
          # Normal version incrementing
          git fetch --tags
          LATEST_TAG=$(git tag -l "${{ matrix.folder }}-*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            NEW_TAG="${{ matrix.folder }}-0.0.5"
          else
            # Extract version numbers
            VERSION_NUMBERS=$(echo $LATEST_TAG | sed 's/${{ matrix.folder }}-//')
            # Increment patch version
            NEW_VERSION=$(echo $VERSION_NUMBERS | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            NEW_TAG="${{ matrix.folder }}-$NEW_VERSION"
          fi
        fi
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "version=${NEW_TAG#${{ matrix.folder }}-}" >> $GITHUB_OUTPUT

    # Create and push Git tag
    - name: Create and push Git tag
      if: github.event_name != 'pull_request' && steps.detect_folder_changes.outputs.changed == 'true'
      run: |
        git config user.name "${GITHUB_ACTOR}"
        git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git tag -a ${{ steps.tag_version.outputs.new_tag }} -m "Release ${{ steps.tag_version.outputs.new_tag }}"
        git push origin ${{ steps.tag_version.outputs.new_tag }}

    # Push Docker images with tags
    - name: Push Docker images
      if: github.event_name != 'pull_request' && steps.detect_folder_changes.outputs.changed == 'true'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
        docker tag ${{ matrix.folder }} $DOCKER_USERNAME/${{ matrix.folder }}:latest
        docker tag ${{ matrix.folder }} $DOCKER_USERNAME/${{ matrix.folder }}:${{ steps.tag_version.outputs.version }}
        docker push $DOCKER_USERNAME/${{ matrix.folder }}:latest
        docker push $DOCKER_USERNAME/${{ matrix.folder }}:${{ steps.tag_version.outputs.version }}
